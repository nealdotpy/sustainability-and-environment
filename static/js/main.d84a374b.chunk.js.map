{"version":3,"sources":["components/spa/ParticleBackground.jsx","components/spa/Splash.jsx","components/Qr.jsx","components/spa/AboutUs.jsx","components/spa/WhatIsEJ.jsx","components/spa/OurProject.jsx","App.js","serviceWorker.js","index.js"],"names":["ParticleBackground","id","options","particleConfig","Component","cursorProps","blink","Splash","className","cursor","prompts","1","2","3","4","Qr","useEffect","hotjar","initialize","rand","Math","floor","random","AboutUs","WhatIsEJ","OurProject","SPA","debug","navigation","navigationPosition","navigationTooltips","licenseKey","scrollingSpeed","render","comp","Wrapper","Main","exact","path","component","App","Boolean","window","location","hostname","match","ReactDOM","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"8RAeeA,E,uKATX,OACE,kBAAC,IAAD,CACEC,GAAG,cACHC,QAASC,Q,GALgBC,aCE3BC,EAAc,CAACC,OAAO,GAoBbC,EAlBA,WAMb,OACE,6BAASN,GAAG,SAASO,UAAU,kBAC7B,kBAAC,EAAD,MACA,yBAAKA,UAAU,eACb,kBAAC,IAAD,CAAQC,OAAQJ,GACb,4B,QCfLK,EAAU,CACdC,EAAG,yFACHC,EAAG,kGACHC,EAAG,uDACHC,EAAG,8GAqBUC,EAlBJ,WAETC,qBAAU,WACRC,SAAOC,WAAW,QAAS,KAC1B,IAEH,IAAIC,EAAO,EAAIC,KAAKC,MAAwB,EAAjBD,KAAKE,UAEhC,OACE,yBAAKd,UAAU,UACb,kBAAC,EAAD,MACA,yBAAKA,UAAU,eACb,2BAAIE,EAAQS,OCpBdd,EAAc,CAACC,OAAO,GAiCbiB,EApBC,WACd,OACE,6BAAStB,GAAG,WAAWO,UAAU,oBAC/B,yBAAKP,GAAG,oBACN,yBAAKO,UAAU,mBACb,kBAAC,IAAD,CAAQC,OAAQJ,GACb,iBAGL,6BACA,yBAAKG,UAAU,iBACd,2BAtBW,yKAuBX,6BACA,2BApBO,6PCNVH,EAAc,CAACC,OAAO,GAiCbkB,EAnBE,WACf,OACE,6BAASvB,GAAG,aAAaO,UAAU,sBACjC,yBAAKP,GAAG,sBACN,yBAAKO,UAAU,qBACb,kBAAC,IAAD,CAAQC,OAAQJ,GACb,2BAGL,6BACA,yBAAKG,UAAU,mBACd,2BAvBI,0OAwBJ,2BAlBe,gQCRlBH,EAAc,CAACC,OAAO,GAoCbmB,EApBI,WACjB,OACE,6BAASxB,GAAG,cAAcO,UAAU,uBAClC,yBAAKP,GAAG,uBACN,yBAAKO,UAAU,sBACb,kBAAC,IAAD,CAAQC,OAAQJ,GACb,iBAGL,6BACA,yBAAKG,UAAU,oBACd,2BAzBU,yTA0BT,6BACD,2BAnBI,uNCDPkB,G,cAAM,kBACV,kBAAC,IAAD,CACEC,OAAK,EACLC,YAAc,EACdC,mBAAsB,OACtBC,mBAAsB,CAAC,GAAI,WAAY,cAAe,cAAe,OAAQ,QAC7EC,WAAc,4BACdC,eAAkB,IAGlBC,OAAQ,SAAAC,GAAI,OACR,kBAAC,IAAcC,QAAf,KACE,kBAAC,EAAD,MACA,kBAAC,EAAD,MACA,kBAAC,EAAD,MACA,kBAAC,EAAD,YAMJC,EAAO,kBACX,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOC,OAAK,EAACC,KAAK,IAAIC,UAAWb,IACjC,kBAAC,IAAD,CAAOW,OAAK,EAACC,KAAK,MAAMC,UAAWxB,MAYxByB,MARf,WACE,OACE,yBAAKhC,UAAU,OACb,kBAAC,EAAD,QC/BciC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,YCVNC,IAASb,OACP,kBAAC,IAAD,KACE,kBAAC,EAAD,OAEFc,SAASC,eAAe,SAG1B/B,SAAOC,WAAW,QAAQ,GDoHpB,kBAAmB+B,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.d84a374b.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport Particles from \"react-tsparticles\";\nimport particleConfig from \"../../media/polygon_config.json\";\n\nclass ParticleBackground extends Component {\n  render() {\n    return(  \n      <Particles\n        id=\"tsparticles\"\n        options={particleConfig}\n      />\n    )\n  }\n}\n\nexport default ParticleBackground;","import React from \"react\";\nimport Typist from \"react-typist\";\nimport ParticleBackground from \"./ParticleBackground\";\n\n// className=\"title jumbotron jumbotron-fluid bg-transparent bgstyle text-light min-vh-100 d-flex align-content-center align-items-center flex-wrap m-0\"\n\nconst cursorProps = {blink: true};\n\nconst Splash = () => {\n\n  // useEffect(() => {\n  //   hotjar.initialize(2074195, 6);\n  // }, [])\n  \n  return (\n    <section id=\"splash\" className=\"splash section\">\n      <ParticleBackground/>\n      <div className=\"splash-text\">\n        <Typist cursor={cursorProps}>\n          {\"The Invisible Impact \"}\n         </Typist>\n      </div>\n    </section>\n  );\n};\n\nexport default Splash;","import React, { useEffect } from \"react\";\nimport ParticleBackground from \"./spa/ParticleBackground\";\nimport { hotjar } from 'react-hotjar';\n\nconst prompts = {\n  1: \"How do you think you could improve your impact on the ecological system of Athens? [1]\",\n  2: \"What do you think communities can do to increase the environmental viability of their area? [2]\",\n  3: \"What frustrates you about environmental justice? [3]\",\n  4: \"Do you think the government is holding up its end of the bargain in relation to environmental justice? [4]\",\n};\n\nconst Qr = () => {\n  \n  useEffect(() => {\n    hotjar.initialize(2074195, 6);\n  }, [])\n  \n  var rand = 1 + Math.floor((Math.random() * (4)));\n  \n  return (\n    <div className=\"prompt\">\n      <ParticleBackground/>\n      <div className=\"prompt-text\">\n        <p>{prompts[rand]}</p>\n      </div>\n    </div>\n  );\n};\n\nexport default Qr;","import React from \"react\";\nimport Typist from \"react-typist\";\n\nconst cursorProps = {blink: true};\n\nconst aboutUsText = \"We are a student run, art-devoted team \\\ndedicated to exploring the impact of artistic instillation in educating \\\ncommunities about the impact of environmental justice.\";\n\nconst mission = \"Our goal is to democratize and disseminate \\\nquestions into the world of academia to better \\\nexamine university impact on local communities, \\\nbringing environmental justice and it's \\\nintersectionality of influence to the forefront of \\\nstudent's minds.\";\n\nconst AboutUs = () => {\n  return (\n    <section id=\"about-us\" className=\"about-us section\">\n      <div id=\"about-us-content\">\n        <div className=\"about-us-header\">\n          <Typist cursor={cursorProps}>\n            {\"Who Are We? \"}\n           </Typist>\n        </div>\n        <br/>\n        <div className=\"about-us-text\">\n        \t<p>{aboutUsText}</p>\n        \t<br/>\n        \t<p>{mission}</p>\n        </div>\n       </div>\n    </section>\n  );\n};\n\nexport default AboutUs;","import React from \"react\";\nimport Typist from \"react-typist\";\n\nconst cursorProps = {blink: true};\n\nconst ejIs = \"is the fair treatment and meaningful involvement of all\\\npeople regardless of race, color, national origin, or\\\nincome, with respect to the development, \\\nimplementation, and enforcement of environmental \\\nlaws, regulations, and policies.\";\n\nconst invisibleImpact = \"With one of the largest population densities and wealth\\\ndistributions in the city of Athens, UGA bears a\\\nparticular burden of influence on the effect it has over \\\nthe local community, sending about 10 million pounds\\\nof waste to the landfill every year.\";\n\nconst WhatIsEJ = () => {\n  return (\n    <section id=\"what-is-ej\" className=\"what-is-ej section\">\n      <div id=\"what-is-ej-content\">\n        <div className=\"what-is-ej-header\">\n          <Typist cursor={cursorProps}>\n            {\"Environmental Justice \"}\n           </Typist>\n        </div>\n        <br/>\n        <div className=\"what-is-ej-text\">\n        \t<p>{ejIs}</p>\n        \t<p>{invisibleImpact}</p>\n        </div>\n       </div>\n    </section>\n  );\n};\n\nexport default WhatIsEJ;","import React from \"react\";\nimport Typist from \"react-typist\";\n\nconst cursorProps = {blink: true};\n\nconst background = \"Athens suffers from its share of environmental issues\\\nsurrounding plastic use, pollution, \\\nlittering, and a general sense of environmental \\\ndisregard. In many \\\nways, these issues occur at the hands of the university \\\nsystem, which seeks to develop and gentrify the \\\ncommunity in pursuit of its own capitalist goals.\";\n\nconst goal = \"By encouraging our fellow students and faculty to \\\nacknowledge their contribution to the problem, we \\\nhope to change the mentality surrounding waste at \\\nUGA from a passive participation to an active \\\nengagement.\";\n\nconst OurProject = () => {\n  return (\n    <section id=\"our-project\" className=\"our-project section\">\n      <div id=\"our-project-content\">\n        <div className=\"our-project-header\">\n          <Typist cursor={cursorProps}>\n            {\"Our Project \"}\n           </Typist>\n        </div>\n        <br/>\n        <div className=\"our-project-text\">\n        \t<p>{background}</p>\n          <br/>\n        \t<p>{goal}</p>\n        </div>\n       </div>\n    </section>\n  );\n};\n\nexport default OurProject;","import React from 'react';\nimport ReactFullPage from '@fullpage/react-fullpage';\nimport { Switch, Route } from 'react-router-dom';\nimport Splash from \"./components/spa/Splash\";\nimport Qr from \"./components/Qr\";\nimport AboutUs from \"./components/spa/AboutUs\";\nimport WhatIsEJ from \"./components/spa/WhatIsEJ\";\nimport OurProject from \"./components/spa/OurProject\";\n\nimport './App.css';\nimport \"bootstrap/dist/css/bootstrap.min.css\";\n\nconst SPA = () => (\n  <ReactFullPage\n    debug\n    navigation = {true}\n    navigationPosition = {'left'}\n    navigationTooltips = {['', 'About Us', 'What Is EJ?', 'Our Project', 'FILL', 'FILL']}\n    licenseKey = {'OPEN-SOURCE-GPLV3-LICENSE'}\n    scrollingSpeed = {1000}\n    // anchors={['splash', 'about', 'schedule', 'faq', 'covidfaq', 'sponsors']}\n\n    render={comp => (\n        <ReactFullPage.Wrapper>\n          <Splash/>\n          <AboutUs/>\n          <WhatIsEJ/>\n          <OurProject/>\n        </ReactFullPage.Wrapper>\n    )}\n  />\n);\n\nconst Main = () => (\n  <Switch>\n    <Route exact path='/' component={SPA}></Route>\n    <Route exact path='/qr' component={Qr}></Route>\n  </Switch>\n);\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Main/>\n    </div>\n  );\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { HashRouter } from 'react-router-dom';\nimport { hotjar } from 'react-hotjar';\n\nReactDOM.render(\n  <HashRouter>\n    <App />\n  </HashRouter>,\n  document.getElementById('root')\n);\n\nhotjar.initialize(2074195,6);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}